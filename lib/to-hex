#!/usr/bin/env bash
# Hex encodes a string and writes it to stdout.
#
# Does not handle NULL characters. Hexadecimal is in capital letters.
#
# $1 - Target variable name for the hex encoded string.
# $2 - The string to encode.
#
# Returns nothing.
string::toHex() {
    local cmd hex IFS LC_CTYPE pattern

    IFS=$' \n' # Work around crazy array slicing bug before bash 4.0-rc1.
    LC_CTYPE=C
    hex=

    if [[ -n "$2" ]]; then
        pattern=${2//?/(.)}

        # Match against a pattern that captures each character. No quotes here.
        [[ "$2" =~ $pattern ]]

        # Convert to arguments to printf, an escaped apostrophe + the char + a space.
        printf -v hex "\\\\'%q " "${BASH_REMATCH[@]:1}"

        # Now convert to hex. Do not add quotes to $hex.
        eval "printf -v hex '${2//?/%02X}' $hex"
    fi

    local "$1" && assign::value "$1" "$hex"
}
