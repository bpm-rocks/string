#!/usr/bin/env bash
. bpm
bpm::include bench

toHexLoop() {
    local hex pos result

    result=
    pos=0

    while [[ "$pos" -lt "${#2}" ]]; do
        printf -v hex "%02X" "'${2:$pos:1}"
        result+=$hex
        pos=$((pos + 1))
    done

    local "${1-}" && assign::value "$1" "$result"
}

toHexPrintf() {
    local hex IFS LC_CTYPE pattern

    IFS=$'\n' # Work around crazy array slicing bug before bash 4.0-rc1.
    LC_CTYPE=C
    hex=
    pattern=${2//?/(.)}

    if [[ -n "$2" ]]; then
        # Match against a pattern that captures each character. No quotes here.
        [[ "$2" =~ $pattern ]]

        # Convert to arguments to printf, an escaped apostrophe + the char + a space.
        printf -v hex "\\\\'%q " "${BASH_REMATCH[@]:1}"

        # Now convert to hex. Do not add quotes to $hex.
        eval 'printf -v hex "${2//?/%02X}" '"$hex"
    fi

    local "$1" && assign::value "$1" "$hex"
}

echo "Sanity check:"

for input in '0123' '0 1 2' $'\xFF\xAA\x7F\x30\x11\x00'; do
    set | grep ^input=

    for function in toHexLoop toHexPrintf; do
        $function result "$input"
        echo "    $function = $result"
    done
done

longString="This is a very long string that I want converted to hexadecimal. One two three four five. Probably a longer line than what most people convert."
shortString="Testing"
emptyString=""

for scenario in emptyString longString shortString; do
    for function in toHexLoop toHexPrintf; do
        eval "bench::test::${scenario}::${function}() { $function result \"\$${scenario}\"; }"
    done
done

bench::auto
